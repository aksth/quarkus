/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ListGroup;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-03T08:23:41.414Z[GMT]")
@Api(value = "groups", description = "the groups API")
public interface GroupsApi {

    @ApiOperation(value = "SEQ-pre-group-case-template: Get the case template for a group", nickname = "sEQPreGroupCaseTemplateGetthecasetemplateforagroup", notes = "Find out what fields are available/required when entering cases into a specific group", tags={ "Misc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "") })
    @RequestMapping(value = "/groups/{group-id}/caseTemplate",
        method = RequestMethod.GET)
    ResponseEntity<Void> sEQPreGroupCaseTemplateGetthecasetemplateforagroup(@ApiParam(value = "" ,required=true) @RequestHeader(value="Date", required=true) String date
,@ApiParam(value = "" ,required=true) @RequestHeader(value="org.akash.Authorization", required=true) String authorization
,@ApiParam(value = "",required=true) @PathVariable("gateway-host") String gatewayHost
,@ApiParam(value = "",required=true) @PathVariable("gateway-url") String gatewayUrl
,@ApiParam(value = "",required=true) @PathVariable("group-id") String groupId
);


    @ApiOperation(value = "SEQ-pre-group: Get a specific group by ID", nickname = "sEQPreGroupGetaspecificgroupbyID", notes = "Traverse down the group hierarchy to determine the full group tree accessible to my API user.", tags={ "Misc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "") })
    @RequestMapping(value = "/groups/{group-id}",
        method = RequestMethod.GET)
    ResponseEntity<Void> sEQPreGroupGetaspecificgroupbyID(@ApiParam(value = "" ,required=true) @RequestHeader(value="Date", required=true) String date
,@ApiParam(value = "" ,required=true) @RequestHeader(value="org.akash.Authorization", required=true) String authorization
,@ApiParam(value = "",required=true) @PathVariable("gateway-host") String gatewayHost
,@ApiParam(value = "",required=true) @PathVariable("gateway-url") String gatewayUrl
,@ApiParam(value = "",required=true) @PathVariable("group-id") String groupId
);


    @ApiOperation(value = "SEQ-pre-group-resolution-toolkit: Get the resolution toolkit for a group", nickname = "sEQPreGroupResolutionToolkitGettheresolutiontoolkitforagroup", notes = "Get the resolution toolkit describing how to construct a valid resolution request on the results of a Case belonging to a specific group.", tags={ "Misc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "") })
    @RequestMapping(value = "/groups/{group-id}/resolutionToolkits/{provider-type}",
        method = RequestMethod.GET)
    ResponseEntity<Void> sEQPreGroupResolutionToolkitGettheresolutiontoolkitforagroup(@ApiParam(value = "" ,required=true) @RequestHeader(value="Date", required=true) String date
,@ApiParam(value = "" ,required=true) @RequestHeader(value="org.akash.Authorization", required=true) String authorization
,@ApiParam(value = "",required=true) @PathVariable("gateway-host") String gatewayHost
,@ApiParam(value = "",required=true) @PathVariable("gateway-url") String gatewayUrl
,@ApiParam(value = "",required=true) @PathVariable("group-id") String groupId
,@ApiParam(value = "",required=true) @PathVariable("provider-type") String providerType
);


    @ApiOperation(value = "SEQ-pre-group-resolution-toolkits: Get all resolution toolkits for a group", nickname = "sEQPreGroupResolutionToolkitsGetallresolutiontoolkitsforagroup", notes = "Get the resolution toolkits describing how to construct a valid resolution request on the results of a Case belonging to a specific group.", tags={ "Misc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "") })
    @RequestMapping(value = "/groups/{group-id}/resolutionToolkits",
        method = RequestMethod.GET)
    ResponseEntity<Void> sEQPreGroupResolutionToolkitsGetallresolutiontoolkitsforagroup(@ApiParam(value = "" ,required=true) @RequestHeader(value="Date", required=true) String date
,@ApiParam(value = "" ,required=true) @RequestHeader(value="org.akash.Authorization", required=true) String authorization
,@ApiParam(value = "",required=true) @PathVariable("gateway-host") String gatewayHost
,@ApiParam(value = "",required=true) @PathVariable("gateway-url") String gatewayUrl
,@ApiParam(value = "",required=true) @PathVariable("group-id") String groupId
);


    @ApiOperation(value = "SEQ-pre-groups: Get my top-level groups", nickname = "sEQPreGroupsGetmytopLevelgroups", notes = "Fetch the root groups accessible to my API user", response = ListGroup.class, tags={ "Misc", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = ListGroup.class) })
    @RequestMapping(value = "/groups",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListGroup> sEQPreGroupsGetmytopLevelgroups(@ApiParam(value = "" ,required=true) @RequestHeader(value="Date", required=true) String date
,@ApiParam(value = "" ,required=true) @RequestHeader(value="org.akash.Authorization", required=true) String authorization
,@ApiParam(value = "",required=true) @PathVariable("gateway-host") String gatewayHost
,@ApiParam(value = "",required=true) @PathVariable("gateway-url") String gatewayUrl
);

}
